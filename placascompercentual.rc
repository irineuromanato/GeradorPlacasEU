/* 
 Gerador de Placas Europeis, nessa versão ele mostra o percentual e a estatistica de quantas placas podem ser geradas.
 O proposito desse gerador é explorar a linguagem rust e suas possibilidades
 Fiz o mesmo programa em C++ e o tempo de execução era 18% maior
 a Mascara de uma placa europeia é XX-XX-XX sendo que em todas posições podem haver letras de A-Z e numeros de 0-9
*/

// define quais bibliotecas serão utilizadas
use std::fs::File;
use std::io::prelude::*;
use std::io::BufWriter;
use num_format::{Locale, ToFormattedString};

fn main() {


    let letras_numeros = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".chars().collect::<Vec<char>>();
    let total_combinacoes: usize = letras_numeros.len().pow(6);
    println!("Total de combinações possíveis: {}", total_combinacoes.to_formatted_string(&Locale::en));

    let mut buffer = BufWriter::new(File::create("placasdecarros.txt").unwrap());
    let mut count = 0;

    for i in 0..letras_numeros.len() {
        for j in 0..letras_numeros.len() {
            for k in 0..letras_numeros.len() {
                for l in 0..letras_numeros.len() {
                    for m in 0..letras_numeros.len() {
                        for n in 0..letras_numeros.len() {
                            let placa = format!("{}{}-{}{}-{}{}", 
                                letras_numeros[i], letras_numeros[j], 
                                letras_numeros[k], letras_numeros[l], 
                                letras_numeros[m], letras_numeros[n]);
                            
                            writeln!(buffer, "{}", placa).unwrap();
                            
                            count += 1;
                            if count % 10000 == 0 {
                                let percentual = 100.0 * (count as f64) / (total_combinacoes as f64);
                                print!("\r{} - Processado: {:.2}% ", placa, percentual);
                                std::io::stdout().flush().unwrap();
                            }
                        }
                    }
                }
            }
        }
    }
}
